//all basic insertion deletion print node
#include<bits/stdc++.h>
using namespace std;
class node{

public:
	int data;
	node*next;

	node(int data){
	this->data = data;
	this->next =NULL;
	}


};

void print(node* &head){

	node*temp = head;
	while(temp!=NULL){
		cout<<temp->data<<"->";
		temp = temp->next;

	}
	cout<<"NULL";
}

void ins(node* &head, int d){
	node*temp = new node(d);
	temp->next = head;
	head = temp;

}

void las(node* &head, int d){
	node*temp = new node(d);
	node*te = head;
	while(te->next!=NULL){
		te = te->next;
	}
	te->next = temp;
	temp = te;
}

void mid(node* &head, int d, int pos){
	if(pos ==1){
		ins(head, d);
		return ;
	}
	node*temp = head;
	int cnt =1;
	while(cnt<pos-1){
		temp = temp->next;
		cnt++;
	}
	if(temp->next==NULL){
		las(head,d);
		return ;
	}
	node*newnode = new node(d);
	newnode->next = temp->next;
	temp->next = newnode;


}


void deleteNode(node*& head, int val)
{

    // Check if list is empty or we
    // reach at the end of the
    // list.
    if (head == NULL) {
        cout << "Element not present in the list\n";
        return;
    }

    // If current node is the
    // node to be deleted
    if (head->data == val) {
        node* t = head;

        // If it's start of the node head
        // node points to second node
        head = head->next;

        // Else changes previous node's
        // link to current node's link
        delete (t);
        return;
    }
    deleteNode(head->next, val);
}

node* fu2(node*head,int po){
	node*temp = head;
	int cnt =0;
	while(cnt!=po){
		temp = temp->next;
		cnt++;
	}
	return temp;
}


node*rev(node*&head){
	if(head==NULL || head->next==NULL){
		return head;
	}

	node*pr = NULL;
	node*cur = head;
	node*forw = NULL;

	while(cur!=NULL){
		forw =cur->next;
		cur->next = pr;
		pr =cur;
		cur=forw;
	}
	return pr;

}

node*unsor(node*&head){

	if(head==NULL){
		return NULL;
	}

	node*cur = head;

	while(cur!=NULL){
		if((cur->next!=NULL) && (cur->data==cur->next->data)){
			node*k = cur->next->next;
			node*nodelete = cur->next;
			delete(nodelete);
			cur->next = k;
		}
		else{
			cur=cur->next;
		}
	}
	return head;
}
int main(){

	node*h= new node(500);
	node*h1= new node(20);
	node*h2 = new node(30);
	h->next = h1;
	h1->next = h2;
	print(h);
	cout<<endl;
	int d =500;
	ins(h, d);
	print(h);
	cout<<endl;
	int d1 =500;
	las(h,d1);
	print(h);
	cout<<endl;
	int d2 =431;
	mid(h,d2,6);
	print(h);

	cout<<endl;
	deleteNode(h,20);
	print(h);
	cout<<endl;
	int k = fu2(h,2)->data;
	deleteNode(h,k);
	print(h);
	cout<<endl;
	h = rev(h);
	print(h);
cout<<endl;
cout<<"sorted node";
h = unsor(h);
print(h);






return 0;}

